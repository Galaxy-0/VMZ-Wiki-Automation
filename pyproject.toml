[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[project]
name = "vmz-wiki-automation"
version = "0.1.0"
description = "VMZ Wiki自动化工具"
readme = "README.md"
requires-python = ">=3.8"
license = "MIT"
authors = [
    { name = "Your Name", email = "your.email@example.com" }
]
keywords = ["bilibili", "wiki", "automation", "video", "transcription"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Operating System :: OS Independent",
]
dependencies = [
    "aiohttp>=3.9.1",
    "motor>=3.3.2",
    "redis>=5.0.1",
    "PyYAML>=6.0.1",
    "jinja2>=3.1.2",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.2",
    "tenacity>=8.2.3",
    "tqdm>=4.66.1",
    "ffmpeg-python>=0.2.0",
    "openai-whisper>=20231117",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.3",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "pytest-timeout>=2.2.0",
    "black>=23.11.0",
    "pylint>=3.0.2",
    "mypy>=1.7.1",
    "isort>=5.12.0",
    "flake8>=6.1.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/VMZ-Wiki-Automation"
Repository = "https://github.com/yourusername/VMZ-Wiki-Automation.git"
Issues = "https://github.com/yourusername/VMZ-Wiki-Automation/issues"

[project.scripts]
vmz-wiki = "main:main"

[tool.black]
line-length = 88
target-version = ["py38"]
include = '\.pyi?$'
extend-exclude = '''
# A regex preceded with ^/ will apply only to files and directories
# in the root of the project.
^/docs
'''

[tool.isort]
profile = "black"
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 88
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_first_party = ["vmz_wiki"]
known_third_party = [
    "aiohttp",
    "motor",
    "redis",
    "PyYAML",
    "jinja2",
    "python-dotenv",
    "pydantic",
    "tenacity",
    "tqdm",
    "ffmpeg-python",
    "numpy",
    "scipy",
    "openai-whisper",
    "torch",
    "torchaudio",
]

[tool.pylint.MASTER]
ignore = ["CVS"]
persistent = "yes"
load-plugins = ["pylint_django"]
django-settings-module = "vmz_wiki.settings"

[tool.pylint.MESSAGES.CONTROL]
disable = ["C0111", "C0103"]

[tool.pylint.FORMAT]
max-line-length = 88
indent-string = "    "

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --cov=src --cov-report=xml"
testpaths = [
    "tests",
]
python_files = ["test_*.py"]
asyncio_mode = "auto"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::UserWarning",
]

[tool.coverage.run]
branch = true
source = ["src"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]
ignore_errors = true
omit = [
    "tests/*",
    "setup.py",
    "*/__init__.py",
]

[tool.ruff]
line-length = 88
target-version = "py38"
select = ["E", "F", "I", "N", "W", "B", "C4", "UP", "RUF"]
ignore = []

[tool.ruff.isort]
known-first-party = ["vmz_wiki"]
known-third-party = [
    "aiohttp",
    "motor",
    "redis",
    "PyYAML",
    "jinja2",
    "python-dotenv",
    "pydantic",
    "tenacity",
    "tqdm",
    "ffmpeg-python",
    "numpy",
    "scipy",
    "openai-whisper",
    "torch",
    "torchaudio",
]

[tool.hatch.build.targets.wheel]
packages = ["src"]